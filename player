package Activities;

import Utils.ScreenResolution;
import Utils.StringUtils;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.ContextCompat;
import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.media.AudioManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.provider.Settings;
import android.text.TextUtils;
import android.util.Log;
import android.util.Pair;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.View;
import android.view.WindowManager;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.akexorcist.roundcornerprogressbar.IconRoundCornerProgressBar;
import com.example.jlplayer.R;
import com.google.android.exoplayer2.BuildConfig;
import com.google.android.exoplayer2.C;
import com.google.android.exoplayer2.DefaultRenderersFactory;
import com.google.android.exoplayer2.ExoPlayer;
import com.google.android.exoplayer2.ExoPlayerFactory;
import com.google.android.exoplayer2.PlaybackPreparer;
import com.google.android.exoplayer2.Player;
import com.google.android.exoplayer2.SimpleExoPlayer;
import com.google.android.exoplayer2.drm.DrmSessionManager;
import com.google.android.exoplayer2.drm.FrameworkMediaCrypto;
import com.google.android.exoplayer2.source.ConcatenatingMediaSource;
import com.google.android.exoplayer2.source.MediaSource;
import com.google.android.exoplayer2.source.MediaSourceEventListener;
import com.google.android.exoplayer2.source.ProgressiveMediaSource;
import com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection;
import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
import com.google.android.exoplayer2.trackselection.TrackSelection;
import com.google.android.exoplayer2.ui.PlayerView;
import com.google.android.exoplayer2.upstream.DataSource;
import com.google.android.exoplayer2.upstream.DefaultBandwidthMeter;
import com.google.android.exoplayer2.upstream.DefaultDataSourceFactory;
import com.google.android.exoplayer2.upstream.DefaultHttpDataSourceFactory;
import com.google.android.exoplayer2.upstream.HttpDataSource;
import com.google.android.exoplayer2.upstream.TransferListener;
import com.google.android.exoplayer2.util.Util;
import com.google.android.gms.ads.AdRequest;
import com.google.android.gms.ads.AdView;
import com.google.android.gms.ads.MobileAds;
import com.google.android.gms.ads.initialization.InitializationStatus;
import com.google.android.gms.ads.initialization.OnInitializationCompleteListener;

import org.apache.commons.io.FilenameUtils;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;

public class VideoPlayerActivity extends AppCompatActivity implements PlaybackPreparer {

    @BindView(R.id.video_name) TextView VideoName;
    @BindView(R.id.playerView) PlayerView playerView;
    @BindView(R.id.exo_pause) ImageView showads;
    @BindView(R.id.floating_widget) ImageView imageView;
    @BindView(R.id.exoFullscreenIcon) ImageView fullScreen;
    @BindView(R.id.volume_bright_container) LinearLayout VolumeBrightContainer;
    @BindView(R.id.volume_bright_image) ImageView VolumeBrightImage;
    @BindView(R.id.volume_bright_text) TextView VolumeBrightText;
    @BindView(R.id.volume_slider_container) LinearLayout VolumeBarContainer;
    @BindView(R.id.brightness_slider_container) LinearLayout BrightBarContainer;
    @BindView(R.id.volume_progress_bar) IconRoundCornerProgressBar volumeBar;
    @BindView(R.id.brightness_progress_bar) IconRoundCornerProgressBar brightBar;
    @BindView(R.id.pausePlayContainer) LinearLayout pausePlayView;

    Uri videoUri;

    private SimpleExoPlayer player;
    private PlaybackStateListener playbackStateListener;
    private static final String TAG = VideoPlayerActivity.class.getName();
    private boolean playWhenReady = true;
    private int currentWindow = 0;
    private long playbackPosition = 0;
    GestureDetector mGestureDetector;
    AudioManager audioManager;

    static final int MAX_VOLUME = 100;
    static final int MIN_VOLUME_BRIGHT = 0;
    static final int MAX_LIGHTNESS = 255;
    static final double SLIP_SENSITIVITY = 0.65;
    final static int ADD_FLAG = 1;
    final static int SUB_FLAG = -1;
    private static final int MIN_SEEK_DISTANCE = 200;
    private static final int MAX_SEEK_DISTANCE = 10000;

    boolean fullscreen, mIntoSeek, mIsFastFinish = false;
    int mScreenWidth = 0;
    private long mSeek = 0;
    int mMaxVolume, mShowVolume, mShowLightness;
    //Minimum Video you want to buffer while Playing

    private static final DefaultBandwidthMeter BANDWIDTH_METER = new DefaultBandwidthMeter();
    private DataSource.Factory dataSourceFactory;
    private Handler mainHandler;
    private MediaSourceEventListener eventLogger;
    private DefaultTrackSelector trackSelector;
    private DataSource.Factory mediaDataSourceFactory;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_video_player);
        ButterKnife.bind(this);
        MobileAds.initialize(this, new OnInitializationCompleteListener() {
            @Override
            public void onInitializationComplete(InitializationStatus initializationStatus) {
            }
        });


        try {
            this.getSupportActionBar().hide();
        } catch (NullPointerException e){
            e.printStackTrace();
        }

        Intent intent = getIntent();
        if (intent!=null){
            String uri_str = intent.getStringExtra("videoUri");
            videoUri = Uri.parse(uri_str);

            String fileName = FilenameUtils.getBaseName(String.valueOf(videoUri));
            String afterDecode = null;
            try {
                afterDecode = URLDecoder.decode(fileName, "UTF-8");
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
            VideoName.setText(afterDecode);
        }
        //volume brightness control
        mGestureDetector = new GestureDetector(this, mSimpleOnGestureListener);
        VolumeBright();
        playerView.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(final View view, final MotionEvent event) {
                if (mGestureDetector != null) {
                    mGestureDetector.onTouchEvent(event);
                }
                if (event.getAction() == MotionEvent.ACTION_UP) {
                    mIntoSeek = false;
                    VolumeBrightContainer.setVisibility(View.GONE);
                    VolumeBarContainer.setVisibility(View.GONE);
                    BrightBarContainer.setVisibility(View.GONE);
                    if (mIsFastFinish) {
                        player.seekTo(mSeek);
                        mIsFastFinish = false;
                    }
                }
                return onTouchEvent(event);
            }
        });
        playbackStateListener = new PlaybackStateListener();
        //exoPlayerManager = new ExoPlayerManager(playerView);
        //exoPlayerManager.play(Uri.parse(String.valueOf(videoUri)));
    }


    public boolean useExtensionRenderers() {
        return BuildConfig.FLAVOR.equals("withExtensions");
    }
    private void initializePlayer() {
        if (player == null) {

            mainHandler = new Handler();
            eventLogger = new MediaSourceEventListener() { };
            TrackSelection.Factory adaptiveTrackSelectionFactory = new AdaptiveTrackSelection.Factory(BANDWIDTH_METER);
            trackSelector = new DefaultTrackSelector(adaptiveTrackSelectionFactory);
            mediaDataSourceFactory = buildDataSourceFactory(true);

            DrmSessionManager<FrameworkMediaCrypto> drmSessionManager = null;
            boolean preferExtensionDecoders = true;//intent.getBooleanExtra(PREFER_EXTENSION_DECODERS, false);
            @DefaultRenderersFactory.ExtensionRendererMode int extensionRendererMode =
                    (useExtensionRenderers()
                            ? (preferExtensionDecoders ? DefaultRenderersFactory.EXTENSION_RENDERER_MODE_PREFER
                            : DefaultRenderersFactory.EXTENSION_RENDERER_MODE_ON)
                            : DefaultRenderersFactory.EXTENSION_RENDERER_MODE_OFF);
            DefaultRenderersFactory renderersFactory = new DefaultRenderersFactory(this, drmSessionManager, extensionRendererMode);
            player = ExoPlayerFactory.newSimpleInstance(this, renderersFactory, trackSelector);
            //player = new SimpleExoPlayer.Builder(context, renderersFactory).setTrackSelector(trackSelector).build();
            player.addListener(new PlaybackStateListener());
            player.setPlayWhenReady(true);

            // Bind the player to the view.
            playerView.setPlayer(player);
            playerView.setPlaybackPreparer(this);
        }
        String contentUrl = String.valueOf(videoUri);
        MediaSource[] contentMediaSource = new MediaSource[1];
        contentMediaSource[0] = buildMediaSource(Uri.parse(contentUrl), null, mainHandler, eventLogger);
        MediaSource mediaSource = new ConcatenatingMediaSource(contentMediaSource);

        // Prepare the player with the source.
        //player.seekTo(contentPosition);
        player.prepare(mediaSource, true, false);
    }

    private MediaSource buildMediaSource(Uri uri, String overrideExtension, @Nullable Handler handler, @Nullable MediaSourceEventListener listener) {
        @C.ContentType int type = TextUtils.isEmpty(overrideExtension) ? Util.inferContentType(uri) : Util.inferContentType("." + overrideExtension);
        switch (type) {
            case C.TYPE_OTHER:
                return new ProgressiveMediaSource.Factory(mediaDataSourceFactory).createMediaSource(uri);
            default: {
                throw new IllegalStateException("Unsupported type: " + type);
            }
        }
    }

    private DataSource.Factory buildDataSourceFactory(boolean useBandwidthMeter) {
        return buildDataSourceFactory(useBandwidthMeter ? BANDWIDTH_METER : null);
    }

    /** Returns a {@link DataSource.Factory}. */
    public DataSource.Factory buildDataSourceFactory(TransferListener listener) {
        return new DefaultDataSourceFactory(this, listener, buildHttpDataSourceFactory(listener));
    }

    /** Returns a {@link HttpDataSource.Factory}. */
    public HttpDataSource.Factory buildHttpDataSourceFactory(TransferListener listener) {
        return new DefaultHttpDataSourceFactory(Util.getUserAgent(this, this.getString(R.string.app_name)), listener);
    }


    private void releasePlayer() {
        if (player != null) {
            playWhenReady = player.getPlayWhenReady();
            playbackPosition = player.getCurrentPosition();
            currentWindow = player.getCurrentWindowIndex();
            player.removeListener(playbackStateListener);
            player.release();
            player = null;
        }
    }

    @Override
    public void onStart() {
        super.onStart();
        if (Util.SDK_INT >= 24) {
            initializePlayer();
        }
    }

    @Override
    public void onResume() {
        super.onResume();
        hideSystemUi();
        if ((Util.SDK_INT < 24 || player == null)) {
            initializePlayer();
        }
    }

    @Override
    public void onPause() {
        super.onPause();
        if (Util.SDK_INT < 24) {
            releasePlayer();
        }
    }

    @Override
    public void onStop() {
        super.onStop();
        if (Util.SDK_INT >= 24) {
            releasePlayer();
        }
    }

    @SuppressLint("InlinedApi")
    private void hideSystemUi() {
        playerView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE
                | View.SYSTEM_UI_FLAG_FULLSCREEN
                | View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY
                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);
    }

    @Override
    public void preparePlayback() {
        player.retry();
    }

    private class PlaybackStateListener implements Player.EventListener {
        @Override
        public void onPlayerStateChanged(boolean playWhenReady, int playbackState) {
            String stateString;
            switch (playbackState) {
                case ExoPlayer.STATE_IDLE:
                    stateString = "ExoPlayer.STATE_IDLE      -";
                    //Toast.makeText(VideoPlayerActivity.this, "ideal", Toast.LENGTH_SHORT).show();
                    break;
                case ExoPlayer.STATE_BUFFERING:
                    stateString = "ExoPlayer.STATE_BUFFERING -";
                    break;
                case ExoPlayer.STATE_READY:
                    stateString = "ExoPlayer.STATE_READY     -";
                    break;
                case ExoPlayer.STATE_ENDED:
                    stateString = "ExoPlayer.STATE_ENDED     -";
                    break;
                default:
                    stateString = "UNKNOWN_STATE             -";
                    break;
            }
            Log.d(TAG, "changed state to " + stateString + " playWhenReady: " + playWhenReady);

        }
    }



}
